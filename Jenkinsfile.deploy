// one job per arch (for now) that copies built images to the arch-specific namespaces
properties([
	disableConcurrentBuilds(),
	disableResume(),
	durabilityHint('PERFORMANCE_OPTIMIZED'),
	pipelineTriggers([
		upstream(threshold: 'FAILURE', upstreamProjects: 'meta'),
	]),
])

env.BASHBREW_ARCH = env.JOB_NAME.split('/')[-1].minus('deploy-') // "windows-amd64", "arm64v8", etc

node('multiarch-' + env.BASHBREW_ARCH) { ansiColor('xterm') {
	stage('Checkout') {
		checkout(scmGit(
			userRemoteConfigs: [[
				url: 'https://github.com/docker-library/meta.git',
				name: 'origin',
			]],
			branches: [[name: '*/subset']], // TODO back to main
			extensions: [
				submodule(
					parentCredentials: true,
					recursiveSubmodules: true,
					trackingSubmodules: true,
				),
				cleanBeforeCheckout(),
				cleanAfterCheckout(),
				[$class: 'RelativeTargetDirectory', relativeTargetDir: 'meta'],
			],
		))
	}

	dir('.bin') {
		deleteDir()

		stage('Crane') {
			sh '''#!/usr/bin/env bash
				set -Eeuo pipefail -x

				ext=''
				if [ "$BASHBREW_ARCH" = 'windows-amd64' ]; then
					ext='.exe'
				fi

				# https://doi-janky.infosiftr.net/job/wip/job/crane
				wget -O "crane$ext" "https://doi-janky.infosiftr.net/job/wip/job/crane/lastSuccessfulBuild/artifact/crane-$BASHBREW_ARCH$ext" --progress=dot:giga
				# TODO checksum verification ("checksums.txt")
				chmod +x "crane$ext"
				"./crane$ext" version
			'''
			if (env.BASHBREW_ARCH == 'windows-amd64') {
				env.PATH = "${workspace}/.bin;${env.PATH}"
			} else {
				env.PATH = "${workspace}/.bin:${env.PATH}"
			}
		}
	}

	dir('meta') {
		def shell = ''
		stage('Generate') {
			shell = sh(returnStdout: true, script: '''#!/usr/bin/env bash
				set -Eeuo pipefail -x

				jq -L.scripts -r '
					include "jenkins";
					crane_deploy_commands | @sh
				' builds.json
			''').trim()

			shell = shell.replaceAll("\r", '') // deal with Windows...
		}

		stage('Deploy') {
			sh """#!/usr/bin/env bash
				set -Eeuo pipefail

				commands=( ${ shell } )
			""" + '''
				for c in "${commands[@]}"; do
					tries=3
					while ! output="$( { eval "$c"; } |& tee /dev/stderr )"; do
						# check to see if we hit the docker hub rate limit
						if grep -q 'TOOMANYREQUESTS' <<<"$output"; then
							if [ "$(( --tries ))" -le 0 ]; then
								echo >&2 'failed to copy image 3 times'
								exit 1
							fi
							echo 'sleeping before retrying...'
							sleep 60
						else
							# non 429 error
							exit 1
						fi
					done
				done
			'''
		}
	}
} }
